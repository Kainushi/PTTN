"""Python type typing ninja"""
import sys
from dataclasses import dataclass
from random import choice, randint
import pygame
import zlib

pygame.font.init()
width, height = 1280, 720
size = width, height
background_color = 200, 200, 200
game_clock = pygame.time.Clock()


screen = pygame.display.set_mode(size)
game_status = "MENU"
words = ["memoryview", "bytearray", "bytes",
         "complex", "int", "float",
         "set", "frozenset", "tuple", "range", "list", "dict",
         "bool", "str"]
start_btn_img = zlib.decompress(b'x\x9c\xed\x971N\xc40\x10\x00\r\x15\xa2\xe1\xbf\x88?\xf0\x06jJJ\xf8\x0c\xed=\x806\xe0\x88D\xbe(\x97d\xed\xf5:\xb6g\xa5\xd1\x89\x9c\x1d\xdb\xbb\x93\xbd\xe0\xdcj\x0c\xd0\r{1\x8e\xfb\xf9t\xc3\xe5\xe3\x1e\x1a\xc7\xd7y\xc7\x8d\xe1\xfb\xdd\xcdcK\xef\x17l\x9c\xf0\x9f\xbe\xee+^\x8c\xd7q\xa2/B\'V\xbc\xc0\x89\x0e\xd9pb\xf8z\xc5\x89\x1eY:\xe1=\x98\xde/p\xa2Op\x02p\x02p\x02p\x02p\x02p\x02p\x02p\x02J\x83\x13\x80\x13\x80\x13\x80\x13\x80\x13P\xb3\x13\xee\xc5m\x922WB\xec:\x9ag\x95\xdc\xdf\xea\xecVNh\xed\xbd\x07\'J\x9f\xdd\xc2\x89\xda\xf2\xa2\x95S\x8d\xfd\xe2\x04Nl\xad\xd5\x8a\x13\xa9\xf5HuO2_\x9aw\xed=Y\xads\x14K\'$s\xcf\xe0D\xca\xbd\xa5\xf3pB\x17\x9c\xc0\t\xed\xb5\xb6zwl_\xc7\x89\xe3y\xce\xe1F\x0e\'R\xef\x8f\x13r/4\xcfQ\xbb\x13)\xfbo\xd9\x89\x943i\xe7\xf4\x88\x131\xcf}\x8e\x1c\xd4\xe6\x84\x95\x17\x169\xb5r\xc2\xf2y(\xe5Dl\x8e,\xf2"Y\x1b\'\xf4\x9d\x88\xc9[\t\'\xb4\xc6\xc7:a\xd9#\xcf\xe8\xc4^\xfeJ8\xa1U\xbf\x94\xfecq\xf6\xb3;\x91z\xb6\x98\xb9\x1a>Hk\x9d\xe3\x99\xa8\xc9\t\xcb\x1e\x88\x13\xf58qt\x9f%\xfa\xe7\x99\x9cH\xc9A\xcdNh\xe4Y+/\xda\xcf\xe5\xda\\\x9c\xa8\xdf\t\xed\xf54{\x17N\xe4\xff\x1f\x1d\'\xca8!\xf5#\xe5\x0c\x92\xfb\xe5\xeaK\xcb{\xc4\xae!\xdd_\xadN@]\xe0\x04\xe0\x04\xe0\x04\xe0\x04\xe0\x04\xe0\x04\xe0\x04\xe0\x04\x94\x06\'\x00\'\x00\'\x00\'\x00\'\x00\'\x00\'\xe0\xccNL\xd7\xa1}\xf6\x9c\x98\xfe~{\x1e?\x89\xc6\xe3\xbf\xce#K\'&\x1f\xfc\x18|\xe8+\x82\x9a\x87}\xc1\xc7x\xdd{\x12\xbaRl\xa3\x84E\xcc\xbf\x11\x9e\xa0g\xcc\xdfON\xb8\xeb~\x81\x17m\xc6U\x8do81\x8f\x9b\xbe\x0f\xc6<\xfdqg\xbdi"K\xf8:\xfaz\xce5\xde\xf0\xc1\xb9\xc5\xefG0\xee\xd1r\xd3D\xf6\xf0\xf5\xbcU\xeb\xb5X\xf6\x88\x07\xb3\x9d\x12\x96\xe1\xeb*yG\xe0=\xa2\x9fX\xad\xf5/\xb1\x1f?>')
menu_btn_img = zlib.decompress(b'x\x9c\xed\xda=R\xc30\x10\x86aA\x95\xa1\xe1\xbe\\\x823\xa4\xa6\xa4\x84\xcb\xd0r\x00Z\xc3z\xb0G\xf1(\x96\xf5\xb7\x92\xa5wg\xbe\xc9\xc4\x96\x13I\xfb\xc4I\x11c\x9c5\x91a\xe2\xaby\xdc\xcf\x87\x99\xbe\xdf\x1fI\xe7\x91>{lL_of\x1d[{\xbeD\xc7\x84<J\xdf\x1d.\xe6\xe3\x98\x18+\xb6\t\x87\x0bL\x0c\x98\x1d\x13\xd3\xe7+&F\xcc\xd6\x848X~_`b\xcc`\x82`\x82`\x82`\x82`\x82`\x82`\x82`\x82\xd4\x0e&\x08&HM\x13\xbe\xffm\x94~\x1d\xdfuG\x12\xfa\xba\xb1k\xc95>\xf5:L\xe47\xe1[\x17&\xe2\xf6<\xd7k`\x02\x13\xad\x98\xc8\xd9\xe3\x11M\xe4\xe8i\x89}\xd1v\x8a\x89\xfeM\x84\xdec0\x81\tL\x84\xef_\xca\xb5\xad\x98\x08Y\xd7\xe8&\\\xe7|\xd7j\xee\xa7\xe6\xba0\xb1\xdf\xdf\xbd\xebr\xeeg\xecg<u]\x98\xf0\xcf+\xf5x\x8b&|\xf7\nL`\xa2\xd4\x1az5q\xa4o%>c\xa5Mh\xb8\xc6\x84\xee~\x96Z\x17&\xc66\xe1\x1a\x87\x89\xf8\xbdK\x1d\xd7\xaa\x89\xa3\xf61\xd1\xaf\x89\x10\x17\x98\xf0\x8f\xcd\xb1\xce\x9eM\x94\\7&\xca\x9a8\xea"\xe6\xfd\\\xd7\xc5\xbeG\x8b&j\xf5"\xa6W-\x99H]\x0b&\xea\x9882\x97\xd8\xb5\xe7\xf6\x80\x89\xf3\x98\x88]O\xcc>cB\xc7\x84o>\xb9\xf6"u\x8fK\x9b \xe7\x0c&\x08&\x08&\x08&\x08&\x08&\x08&\x08&H\xed`\x82`\x82`\x82`\x82`\x82`\x82`\x82`\x82\xd4\x0e&H\x8a\x89\x1c\xffe#\xe7\x88\xcf\xc4\xf2\xfc\xfa2?R\x9d\xd7\x7f\x9f\xe7lM,\x1ed\x0c\x1e\xc6*\xab\xe7\xf6}Aj>.Nl+\xd5&Ji\xd4\xfa\x1d!\xb1\xee\x19\xeb\xf9\xc5\x84\xb9\xbd_\xe0\xa2\xcf\xba\xe9\xf1\x1d\x13\xeb\xb8\xe5\xbc5\xe6\xf9/\x0f\xda\x93\xa6\x8a\x94\xf4Q\xfa\xb9\xf6x\xc7\x831\x9b\xef\x0fk\xdc\x93\xe6\xa4\xa9\xe2%\xfd\xbc\xd7kWm\xef\x11\x17\xb5\x99R\x9a%}\r\xf9\x8d\xc0\xef\x88q\xca\xd9\xeb_\x18\x1f\xbby')
retry_btn_img = zlib.decompress(b'x\x9c\xed\xd6MN\xc30\x10\x86a\xc3\n\xb1\xe1\xbe\x88;p\x06\xd6,Y\xc2e\xd8\xf6\x00l\x03\x8ep\xe4Zi\xe2\x9f\xf1\xff;\xd2\xa7\x8a\xd6$\xf6\xcc\xa3\xb4J\xed\xd6B\xa6\xc9Y\xad\xeb~>\xd5r\xf9\xb8\'\x83G\xcf\xf9\xc4\xc6\xf2\xfd\xae\xb6\xb5\xb5\xf7K\xca\x98\xd0\xafz\xee;.\xd6\xf711Wl\x13;.01a\x0eL,_\xaf\x98\x981\xae\t\xed\xc0\xfc\xbe\xc0\xc4\x9c\xc1\x04\xc1\x04\xc1\x04\xc1\x04\xc1\x04\xc1\x04\xc1\x04\xc1\x04\xa9\x1dL\x10L\x10L\x10L\x10L\x90\x9eL\xa8\x17\x15\x9c\x9c\xd7v\xef\x93z\x8d\xa3}K\x9d=\xa5O\xb1\xff\xdb\x9a\t\xdf}\x8fh"\xf4Z9<\xb4l"\xf6\xcc#\x98\xf0\xbd^h\x7f|\xe7\xd6\xb2\x89\xa3s\x8cn\xc2\xbdfH\x7fB{Y\xdb\x84\xd4\xb3.\xe5\xcc\xd2{/uvi;\xad\x9b\x90\xe8c\xaf&|\xd7c\x02\x13\xbe\xeb\xccZ\t\x0f\x98\xe8\xcf\xc4\xd1\xec\xa5z\x82\tL\xb4jB\xa2\x87\x92}*i"\xe6^\xb9<\xd40!5\xbb\x1eM\x94\xd8c\xaa\x87VM\xe4\xeey\xcb&\xa4\xee\x81\x899MH\xec\xb3\x17\x13>\xe7\xca\xd1\x8b\x16LH\xdc\xa77\x13!\xfd\x1b\xcd\x84\xd4\xd9g0\x11\xd3\x9bQL\xa4\xba\xc0\x04&f2\x11\xda\x9b\x91L\xa4\xb8\xc0\xc4\xf9Z\xdf`\xa2\x0f\x13!\xbd\x19\xcdD\xac\x0bL`bF\x13\xbe\xbd\x19\xd1D\x8c\x8b\xdeL\x90>\x83\t\x82\t\x82\t\x82\t\x82\t\x82\t\x82\t\x82\tR;\x98 \x98 \x98 \x98 \x98 \x98 \x98 -\x9b0\xef\x93\xf1sf\xc2\xfc\xfd\xf6\xbc\xbeR\x83\xd7\xff\x9c\xd7\xb8&\x8c\x07\xbd\x06\x0fs\x955s\xfb\xb9\xa0k}_;\xb1\xadT\xdb(U\xa2\xb6\xef\x08\x1d\xeb\x99\xb1}nL\xa8\xeb\xe7\x05.\xc6\xac\xab\x19\xdf0\xb1\xad3\x9f[k\x9e\xferWz\xd3T\x96\xd2s\xd4\xf3\xdcf|\xe0A)\xe7\xfb\xc3Z\xf7Xr\xd3T\xf6\xd2\xf3\xbc5\xeb\xbdr\x9f\x11\x0f\xc5vJ\x95,=\xd7\x90\xdf\x08\xfc\x8e\x98\xa7vg\xfd\x0b\xd8\x98\x17u')
quit_btn_img = zlib.decompress(b'x\x9c\xed\xd6MN\xc30\x10\x86a\xc3\n\xb1\xe1\xbe\\\x823\xb0f\xc9\x82\x05\\\x86m\x0f\xc06t"\x1c\xb9Q\xda\x18\xc7\x9e\xf1\xcf;\xd2\xa7\xaa\xa9k;\x99GI\x9c\xdb\xac\x89\x0c\x93\xbd\x9a\xc7\xfd|\xba\xe9\xf4~O:\x8f\xf4y\xc7\xc6\xf4\xfd\xe6\x96\xb1\xd6\xfb%:&\xe4S\xfa\xbe\xe1b>\x8e\x89\xb1\x12\x9a\xd8p\x81\x89\x01s\xc3\xc4\xf4\xf5\x82\x89\x11\xb36!\x0e\xfc\xfb\x05&\xc6\x0c&\x08&\x08&\x08&\x08&\x08&\x08&\x08&\x88u0Aj7\xf1q^w/\xb9\xe7.9G\xec\xf8\x98\xf3>\x92\xd6Lh\x9d+&\xda0\xa1y\xbe\x98\xa8\xdf\x84\xf6yc\xa2n\x13\x16\xe7\x8d\x89zM\x1c\xd9\x7f\x89\xff\xd6`\xa2\xc4\xda\xa9\xd16\x91\xc3s\xea\x1c\x98h\xcfD\xe9y0\xd1\x96\t\x8d\xb90Q\x9f\x89\\\xf7\x88\xd4\xf90\xd1\x8e\t\xad91\x81\tL`\x02\x13\x98\xc0\x04&0\x81\tL`"\xd7|\x98h\xc7\x84\xf55\xc2D[&r\xf5&\xa5?\xb1k\xe7\\\x13\x13q\xd75Go\xf6\xe6(\xb1\xaeV\x1f{5Q\xaa\xa7\xb1\xd7\'\xe5\xffV\x06G2\x11s\x9dSc\xb1.&\xf2\xad\xad\xed\xa1\xc4\xba\x9a}\x1c\xc1D\xce\xfeX\xac\xab\xdd\xc7QL\x1c\xedO\xed\xebbB\xdf\x87\xe6\xba\xd6}\x1c\xd5DJ\xcf\xac\xf6\xd4kZ1\x81\x0bL`\x02\x13\xb8\xa8\'\xad\x99\xc0\x05&\x08&\x88}0A0A0A0A0A0A0A0A\xac\x83\tr\xc4\x84?N\xfa\xcf\x9e\t\xff\xfd\xf5y\xfe\xa4:\xaf\xbf>\xcfY\x9b\xf0\x1ed\x0c\x1e\xc6\xaa\xa0\xe7\xe1}Aj>.NB+f\x1b\xa54jyFH\x82{\xc6\xf2\xbb7\xe1.\xef\x17\xb8\xe8\xb3.z|\xc5\xc42\xce\xff\x1e\x8cy:\xe7N{\xd3T\x91\x92>J?\x97\x1e\xdf\xf0\xe0\xdc\xea\xf9\x11\x8c{\xd4\xdc4U\xbc\xa4\x9f\xd7z\xbdU\xeb{\xc4\x83\xdaN)\xcd\x92\xbe\xfe\xe7\x1d\x81\xf7\x88qj\xb3\xd7\xbf\xe3\x9a\xf42')


@dataclass
class Player:
    _score = 0
    score_max = 999_999

    @property
    def score(self):
        return self._score

    @score.setter
    def score(self, i: int):
        if not isinstance(i, int):
            raise ValueError(f"{self.__class__.__name__}.score must be an integer")
        if i < 0:
            raise ValueError(f"{self.__class__.__name__}.score must be a positive")
        if i >= self.score_max:
            i = self.score_max
        self._score = i


@dataclass()
class Enemy:
    _enemy_types = {
        "Villager": {
            "hp": 1,
            "speed": .1,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b'x\x9c\xed[;ND1\x0c\xdcC\xd0\xed\x1d\xa8h\xf6\x06\x08$h\xb8\x0c\x055\xa2\xe4 \xf4\x9c\x02\x89\x93 q\x81EA\xb2\xf0F\xfeLb\xbf\xcf>b)by/cg\x1c\x132\t\xecv\xc3\x86\xfd\xd9\xc5~\x7f\xb4\xda\x96\xf1\xe5\xfd\xf7\xdb\x93\xd9,\x1f\xe7\x8cG\xb0\x96\x8fs\xc6\x97\xef?o\xaf`|\xe9\xcb}d\xe0\xbf^\xefg\x8b_be\x8f\x7f\x0b\xfc\x911\x94>Z\xfc\x08\xbe<\x9f+\xbe\xc5\x9f\xde\xd1g\xe9\x99\x15\x1fi\x16\x7f)6\x82G\xe2\xd7q\x06\xffS<\xe2\x83\xfaM\x81Gs\x17\x89/\xe5\xaf\xf6\xe15\xed\xf7\xcf\xb9\xe3\x1f\x9e_N\x1a\xf5\xaf\x9fkx\xc9\x87\x84\xb5\xf6 w\xd77f\xf3\xf6?=x\xca\xdd\xe3\xfb\xc7o\x9f\xf2Uj\xf4\xce\xaa?\x8f\xbf5\x07\x9c\xc3\xe5\xe1p\xe4~\xcbgzf\xf1\xd7pV\xee\xf8\xbaP\xe7\xaa\xce\xa9\xb7~x\xf9G\xf9S|\x1e\x0f\x9d\x7f\t\x87`k\xae\xd6\xb3l\xbc\xc6\x83\xfb\xf0pQ\xec\xb0\xb8\xf1\xbcKm\xe9\xf1Mi\x85_\xab\xf6Z\x9b\xf5\xce\x1f\xc2\x1d\xc9A\xb4~"\xf8\xde\xf9\xa3\xf5\xbfW\xbfE\xe3g\xe0#\xf3\x97\xc1?Z?K\x8e\x9f\xef\xdf#\xfa7\x1a\x1f\xc5k\xfb\x97\x0c\xfe\x11\xfd\xb74\xff\xc8\xfce\xe9\xdfh|\x04?\x95\xfe\x8f\xe8\xdf5\xe8\xff^\xfeu\x0e\x10\xfd\xb96\xfe\xa8\x0fM\xbf\x90\x8f\x1e\xfd\xd7\xf2\xf33\xc5\xf9\x07\xe1\xf9\xf8\xb4f\xe9\x7f\xf2\xdf\xa3\xff[\xeb\'\x13\xcf\xf7G\x91\xf3\x0f^[\xa4\xbbZ\xcf/\xbc\x1czx\r\'\xd5\xbd\x84\xd7\xf4+\xe1\xcb\xf9\x87\xb5\x87\xaa\xeb\xaa\x97\x7f=\x1f\xc8\x19\x0e\xefS\xd7\x1b\xc2\xdf\x1a3\x8a\xb7\xfc\xb5\xec\xdf\xbd\xf1\xa0\xe3\xd6\xfc\x0e\x1b&\x19_\x0b\xa5\xb6e|y\xdf\xa3\xbd\xb6\x80G\xb0\x96\x8fs\xc6\xd3\xdea.\xfd\xb5V\xfd\xf7\xdf\xf9\xcf\xa5?\xb7\xaa\x7f\x11\xed\xe1\xf1\x97b\xaf]\xffn\x85\x7f\xe4\xfc"\x03\x8f\xe6.[\xff\x92\x8f\xa8\xfe]J\xbff\xe1\x8b\xb6[\xfa\xfe\x9fxd\xeb_\xe2\xed\xe5N\xbb\xfb\xa7\xe6\xd5_\xc6\xfd?\xe7\xca\xfb\xa3\xfc%\x9c\x85\xe5\xeb\xc2\xb8\xff\x1f\xf7\xff\xc3\xfa\x8d\xe7]jK\x8foJ+\xfcZ\xb5\xd7\xda\xacw\xfe\x10\xeeH\x0e\xa2\xf5\x13\xc1\xf7\xce\x1f\xad\xff\xbd\xfa-\x1a?\x03\x1f\x99\xbf\x0c\xfe\xd1\xfaYr\xfc|\xff\x1e\xd1\xbf\xd1\xf8(^\xdb\xbfd\xf0\x8f\xe8\xbf\xa5\xf9G\xe6/K\xffF\xe3#\xf8\xa1\xff\xf3\xf9s\r\xd0\xaa?[\xf8G\xf4\xbf\xc7\x1f=\xbf\xa8\x7f\x97r|\x8f\xfeE\xe7O\xcba\x9d\xfb\xd6\xfa!\x1f\xde\xf9G\xad\xa5k<\xf9\xe8\xb9\x83F\xea\xc7;\x7f\xa85v\xeb\xf9G\xf9;y\xef\xfc\xc3\xdaK\x91\xd6\x92\xeea\xb5\xda\x93r\xa8\xd5\x11z\xfe\xd3z\xfe\xc1\xf9\xd3\x18-\xfd*\xe15\xfe\xd2:\xa1\xe1\xb9\x8f2\x16\xfa\xbf\x05\xf2\x83\xf2\xe7\xe3\xe0~\x90\xd8|\x8eZ\xfevA\xca\x01\xd2_\xc3Jq\xbd\xfc\xf1\xf7\x9e/\xb2\x1fD4Y-'),
                                                    (64, 64),
                                                    "RGBA")},
        "Blue Ninja": {
            "hp": 1,
            "speed": .15,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b'x\x9c\xedZ;n\x15A\x10D>\x03\x99%"R2\x8b\x00B\x87\x04\x04\xa4Hp\x05\x87\x04\x883 q\x02rrB\x02b$\xae@H\x82\xcc\x05\x1ejKe\x95\x8b\xea\x9e\xd9\x99\xf5\xda\xcf~H#\x9ew\xa7?\xd5\xd3\xdb\xfb\xaa\xfb=xp\xbf\xff\xedv\xbb+\xeb\xe1\xf1\xf1\xaeZ\xba\xff.\xc9\xc7\xfdw_\x7f\xec\xfe\xfe>\xb7+\xeeU:f\xe4\xe1_%\xdbk\xbf\xf2!\x8bC\x8fl\xe5\xc3\x8c|\xfc}\xfe\xfd\xacK\xb6\xc7~KO\xd8r>T\xf2\xb3\xf6+y\xc6\x0f\xff2\xd9^\xfb\xea\x83\xea\xcf\xf0\xf3>]\xb8W\xd9\x1f\x91\x07~^\x99\x0e\xc8\x1f\x1d\x1d]\xca\xc7g\x87_m\xf3b\x1f\xe2\xf3\x9b\xb3\xb7v\x9f\xf3+\xf6\xae-\xaf1\xc8p\xc0\x0e\xc7\x00\xd8q\xaf\x85_k\x80\xca\xb7|\xd73\x9c\x95\xd7\xba\x1d{\x1c\x16\\C\xfc\x18?\xdfsr\x90\xc9\xb0snU\xcb\xede\x9b\xf1\xf9\xf9\xd3S\xbb\xd4G\xf8\x01\xbdj\x0b~k<*\xfc\x8c\xd7\xe1f[\xee\xecz\xf0\xeb^\x8d\xbb\xdaw\xfe;\x1f\xd4\xfeZ\xf9\xeft:\xdb\x0eW\x85S\xf7Ug\xaf9\xc0>\xa0~eqs1t\xf8\xab\xd8k>p\xfdT\xac\xd93\xe4\xe2\xc7\xb5\xb7\xc7\xb6{\xfeC\xc7\x87\xcf_\xae\xd4\x80\x88UU\xffc?0@6\xdb\x1f\xbaX7\xcbj\xfd\xe1s\xe2\x85\xebZ?B\x0fb\x00\xf9\x0c\xb7\x93w\xef\xd1*\x7f\xe0\xbf\xe2G\x0cZ\xb2\x99\xcd\x9f/N.\x16\xc7\x8c\x17\xaec\x9f\xd6P\\o\xd5?\'\x9f}\x8fa\xbd\\\xb7\xf4\xfc8\x7f29\xf7\xcea\x9b\x7f>\xbe\xbcXU\x0cu\x9f\xc3\xdf\x92\xef\xc1\x8fX9\xbf\xf4\xd9\xd5\xef@\xceO\xce\xbd*\xef\xb4\x06U\xd7f\xe5\xbf={\\\xf20\xa7#\xfe?y\xf4\xea\xbfg\x17\xf8\xe3\x1e\xefU=\x99\xbd5W\xeb\xfdY\xc9\xa2\x96\xc4z}\xfa\xe9r\xe1Z\xe0k\xe1\xc7\xfdL\x87\x93]\x13{<g\xa3\xfc\xf96\xac\xd1\xf3\xe3:3\xcb\xe1G\xf3gV~\xe6\xfc\xf4\xfd;\xc2\x9fc\xed{\xffc\x86\xff\xf6\xd8n\xd9\xef\xc1\xb0v\xff\x03u\x16\xbaG\xf8\xef>\xf7? ;\xc3\x9f\xf7\xb5\xff\xa1\xd8G\xf9\xaf\xc6 \xc3\xd1\xd3\x7fh\xe1\xd7\x1a0s~\xce\xf6R\xfe\xabu\xbb\xb7\xff\xe1\xce\xef&\xfa\x1flg\x84\xffB\x87\xdaj\xf5?\x1c~\x17\x7f\x87!;\xbf\x1e\xfc\xda\x83\xe0\xeb#\xfc\x97c\x98\xc5z&\xff\x9dN\xc5\xefb\xe0\xce\xd9\xf5 \x96\xf0_\xe6?\xa8a\xa3\xfd\x0f\x17\xbf\xa5\xfd\x8f\xf8\xcc\xbcWsIs\xce\xd9\x87\x1ep\xae*\xf7\xf9\xf9c\xfc#\xfd\x0f\xd8\x9e\xed\x7f\xa8\xdd%\xfd\x0f\x87_u\xa9,\xe3\xcetTg\x87~\x07\xe3G\x0c29\xc7\xdb\xd5\x07\x8e\xa1\xfa\xceg\xab\xef_\x8d\xe3\xaf\xf7O\xd2\x9c\xee\xc5\x9f\xd5@g\x9f\xb9\x7fV\xfbz\xf0s-ey\xc6\x1f\x7f;\x0e\xca\xfc\x92\x17\xeb\xe3z\xa1\xb1c\x1cZW\xaa\x18V\xf5\xc3\xd5\xa7\xeb\xe2\xbf\x8a\x1b\xd7\x97p\xf0,\x86\xac\x83\xf5\xa8\\\xdc\xeb\xd1Y\xe1h\xbd\xffZq\x98\x91\xe7s\xcaV`\xd4\xfcC\xef#\xee\xb5\xe4+\xfcx\xfeo\xfb\xfc?;\x7f\xae_\x87\xf9\xffa\xfe\x7f\x97\xe7\xff=\xf8\xd5\xf6]\x9b\xff+\xf6\x9b\xe0\xbfk\xc8k\xdd\xdf\x82\xff\xba\xd9)\xfc\xaa\x96\xdb\xab\xdcs\xab\xf9\xbf\xc3\xcfx\xb7\xe0\xbf.\xf7Z\xdc-\xc3\xaf\xf6\xd7\xca\x7f\xa7\xd3\xd9\x1e\xe1\xbf*\xbf\xe5\xfc\xdf\xd5\xbe\xa5\xfc\xd7\xc5\x7f\t\xff]k\xfe\xaf5\xa0\xc5\x7f\x97\xf4?\x95\xff\xba\xef\xc1lw\xeb\xf9?\xf8?\xf3\xb8j\x86\x8c\xfd\x90\x1f\x91\xd5\xf3\xdf\xb7\xf9\x7f\xc6\xff39\xcd9\xb5\xb9O\xf3\xff\xea\xf7\x0f\xfb>\xffw=\x03\xfc\x9d=\xbb\xfa\x1c:\xdbZ3\xaek\xb5\xde\x9f=:\x98\xf33\xb7\x07\xcf\xad\xe6\xff\xbcW\xf5l\x81=\x9e\xb3\xc3\xfc\xff0\xff?\xcc\xff\x97\xf3\xdf\x1e\xdb-\xfb=\x18\x0e\xf3\xff\xc3\xfc_\xed\x8f\x9e\x9fb\x1f\xe5\xbf\x1a\x83\x0c\xc7m\xeb\x7f8\xdbK\xf9\xaf\xd6\xed-\xfa\x1f\xd9s\xd3z\x7f\xb8\xbdl\xe7\xbe\xcd\xffU\xc7\x12\xfe\xebzPY\xacg\xf2\xdf\xe9T\xdf]\x0c\xdc9\xeb\xf9\xa1\xf6\x80\xd7\xf4\xf2_\xfe\x1e\xbf\x8f\xfd\x0f\xfd\r\x03\xe7l\x96\xfb\xd5\x0c\xf6&\xe7\xff\xec\x7fo\xff\x03\x18\xf4\x0cY\x87\xcad\xf8\xb3\xf7x\xc5\x9d\xdd\xfb/\xe3\xe0.g4\xfe\x90\xc9~\xc3\xe1t\xf4\xe40|\x8d\xdf\x04h\xed\xcd\xf0gq\x1f\xc1\xaf\xbed\xf8\xf1\xdby\xfd\x9dC%\x9f\xcd \x15{\xef\x0c:\xab\x01q\x1d\xfei\xedP\xdb\xbc7\xd3\xc56\xff\x01\x02M+\x0f'),
                                                    (64, 64),
                                                    "RGBA")},
        "Black Ninja": {
            "hp": 1,
            "speed": .2,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b'x\x9c\xedY\xcbm\xdd@\x0ct\x11\xb9\xb9\x8d\xc0\x17\x1fs\t\x12\xc0)!n!\xa5\xa4\xb4T\x92\x12\x1c\xec\x03\x18\x10\xc4p8\xdc\x0f`?H\xc0\xc2\xcf\x92\x86\xb3\xc3\xa5\x96\xa4\xf4\xf0p\x1d\x9d\xe3\xd3\xe3\xe3\x9b\rv\xee$\xdf\t\x0c\xc2\xa2\xf1\xf2\xf5\xdbmD\xfd?\x7f\xbd\xdeF\x85\xef\xf2\x1b\x9fq2\x1b\x0c\xa3\xf0{\x1d\xd9\xc8\xec\xfakcd\xf8j\xfe\x88\xcfc\xa3\xef=\xd6\xae!l\xc5\xafh7\x9b\x9e+jg\xdcl\x0e\x15\xbf\xf7;\x8a?\x7f\x8dq#~\xc3)\xfaQ\x0c \xcd\xcc^6\xff\x8aS\xc5+\xb6\xba\xfc\xd1\x7flo8\xcd\x7f\n\xaf\xd8\xc8\xf6\xbf\x15|G\xc3\x0e\xfe\x8c\xfb\xf9\xe9\xcb\xdb\x9f\xef\x9f\xff\xaf\xe7\xf8\x1d\xff\x1f\xf70~u\xa09d\\\x15\x9e\xf1#ML\xff\xdf\xdf?nc\x9cC\xbfO\xe8\xb7=\xc4\xe6f~\xdf\xa9\xdf\xdb\x8e{\xe0\xce\xf8_\xd1\x8fxV\xf5g\xba\xb2\x18\x98\x89\xdd{\xc1\x8f1\xe2\x85\x8d\xac\x8eZ\xc5\x9b\r\x05\x8f\xb0+x\xff\xcc\xd93\x83\x9e\xa3\xf1\xd7?K\xbb\xf0H\x83\xad\x93\xbf?[\xbb\x18\x03\x08\xc7|\x17\xf7\xb7\xb8V\xfe\x9c\xdf\x13\x91\xfe\xca\xff\xaa~\xe3\xf7|\xea\xfa#\x9c\x82\x8dZ\xd9\xb9\xdd\xf8L\x87\xb7Q\xe1V\xb1\xb3\x87\xe7:\xc5\xf1\x9e\x0f\x9f\xbf\xb2\xda\xf8^\xfc\x13\xb5\xd8\xef\x98\xb3Y\xef\xb0\xc2w\n\x83\xb0h\xc4\x1c\x1a\xb5+=\x98\xb2\x0fE>\xe3T\xb0\x08\xa3\xee;\x9d\xfa\xcf\xaf=\xeaQ;=H\xc6\xef\xed\xb0\x1c\xe8\xaf\xb19\xb0\xbc\xd3\xe9\x1d\x91o\x95\xf8g=\x98\xea\xf7\xac\xfe\xf5s`\xb6\x10\xb7R\xfbg=\x80\xca[\xf5\x0f\x15.\xf3_\xc4w\xfd\xdf\xd5\x8f\xf6@\xb5\xf6\x9e\xd5\xbfs\xfe\x19~u\xfdf\xf5w4T\xfc]\xed\x1e\x7f\xbd\xff\x98{\xff\xd1\xf5A\xccE\xb6\xf7}\xd4\xf7\x1ffc\x8c\x99\xfe\'\xcb{\xdd\xfd\x83\r\x96\x03\xcc/\xb3\xb1k6b\x8c\xc4u@k?\x1b?;\xf11\x87\xb3\xf9+\xfaY,T\xf5\x1b\xea\xc3w\xbc\xff@}{\x85\xf7:\x0c\x9f\xe9\xf7~d\xf3Q\xf5w}\xc8\xee\x8dv3~6g\x15\xcf\xec)\xd8Y\x1fV\xf7e\xcf\xddu\xf4\x8eX\xfbe\xe7N\xf2\x9d\xc0 ,\x1aY\xfeA\xb51\x1a]~V7dX\x84Q\xf8Q\x1ef\xf9\xdf\x8f\x98\xb3\xd5\xde\xab\xe2\xf7\xb6L\x1b\xcb\x7f\xdeF\x95\xf7\xbb\xda}\xfd\xec}\xe0\xb5+=X6\x7f\xd5\xefY\xfd\xa3\xd6q(\xff+\xb5_\x16\x03H3\xb3\x97\xcd\xbf\xe2T\xf1\x8a\xad.\x7f\xf4\x1f\xdb\x1bN\xf3\x9f\xc2\xcf\xd6\xff\xab\xf8\x8e\x86\x1d\xfc\x19\xf7\xd5\xff^\xdf\xffW\xe3oE?\xe2Y\xd5\x9f\xe9\xcab`&v\xef\x05?\x86\xf2\xfd\xfc\x04\xdel(x\x84]\xc1\xfbg\xce\x9e\x19\xf4\x1c\x8d\xbf\xd7\xf7\xff\xeb\xfb\xbf\x1a\xff\x1d|\xa6\xc3\xdb\xa8p\xab\xd8\xd9\xc3s\x9d\xe2x\xcf\x87\xcf_Ym|/\xfe\x89Z\xecw\xcc\xd9\xacwX\xe1;\x85AX4b\x0e\x8d\xda\x95\x1eL\xd9\x87"\x9fq*X\x84Q\xf7\x9dN\xfd\xe7\xd7\x1e\xf5\xa8\x9d\x1e$\xe3\xf7vX\x0e\xf4\xd7\xd8\x1cX\xde\xe9\xf4\x8e\xc8\xb7J\xfc\xb3\x1eL\xf5{V\xff\xfa90[\x88[\xa9\xfd\xb3\x1e@\xe5\xad\xfa\x87\n\x97\xf9/\xe2\xbb\xfe\xef\xeaG{\xa0Z{\xcf\xea\xdf9\xff\x0c\xbf\xba~\xb3\xfa;\x1a*\xfe\xaev\x8f\xbf\xde\x7f\xcc\xbf\xff\xe8\xf8 \xdb\xfb>\xf2\xfb\x0f\xb5\xffAy8\xcb{\xdd\xfd\x83\r5\x07(#\x8b!\x1fGh\x1d\xd87\xd4\x95\xf8\xd9\x8dg\xfd;\xab\xa5\xc6\xb9\x95o\xd0\xde6\xb2\xc1z\xe7x=\x9b\x03\xe3\x1e\xfa\xfcs\x8e\xe6R\xd5\x9f\xab\xdf\xa0\xcd\x86\xf7\xfb\x8a~oG\xe1F\xef\r\x14\xed\xc8\x07\xca\xfd\x19\x16\xf1V\xfe\x8b5\x89\xf2\xfe\xeb\x1f\xfa3\xb6>'),
                                                    (64, 64),
                                                    "RGBA")},
        "Red Ninja": {
            "hp": 1,
            "speed": .3,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b"x\x9c\xedY[j\x1cA\x0c\xf4!\xf2\xe7k\xe4'\x10r\x01\x07\x02\xc1\xf8Z!G\xf3\r|\x83\x1c\xc1\xa1\x17\x04\x85(I\xa5~\x80\xbd\xcc@\xb3\xcb\xcc\x94\xaaK\xdd\xa3\xc7\xcc\xc3\xc3ut\x8e/\x8f\x8f\xef6\xb2s'\xf9N`\x18\x96\x8d??^n\xc3\xeb\x7f\xfb\xf6\xf36*|\x97\xdf\xf8\x8c3\xb3\x91a\x14~\xd4\x11\x8d\xc8.^\x1b#\xc2W\xf3g|\x88\xf5\xbeG\xac]c\xd8\x8a_\xd1n6\x91\xcbk\xcf\xb8\xb39T\xfc\xe8w\xb6\xff\xf0Z\xc6\xcd\xf8\r\xa7\xe8g{\x80i\xce\xecE\xf3\xaf8U\xbcb\xab\xcb\xef\xfd\x97\xc5\x86\xd3\xfc\xa7\xf0\x8a\x8d(\xfe\xad\xe0;\x1av\xf0G\xdc\xcf\xdf\x7f\xbf\xbf>}\xbd]\x1f\xbf8\xec\xdc\xb8'\xe3W\x07\x9b\x83\xe76\xae\n\x9f\xf1\x9b&\xb4\x9d\xe9\xff\xf7\xf7\xd7\xed\xfa\xf8\xc5a\xe7N\xe8\xb7\x18bs\x1b<\xbb\xf5\x9b\x86\xf1\xdf\xc7\xc0\x9d\xfb\x7fE?\xe3Y\xd5\x1f\xe9\x8a\xf6\xc0\xcc\xde\xbd\x17\xfc\x18c\xbfd#\xaa\xa3V\xf1fC\xc13\xec\n\x1ec\x8e=3\xec9\x1a\xbf\x18Kv\xe1\x99\x06['\xbc?Z;\xbf\x07\x18.\xf3\x1d\xc6;\xb6Vx\x0e\xe3!\xd3_\xf9_\xd5o\xfc\xc8\xa7\xae?\xc3)X\xaf5;\xb7\x1b\x1f\xe9@\x1b\x15n\x15;{ \xd7)\x8e\x8f|`\xfe\x8aj\xe3{\xf1\x8f\xd7b\xff}\xce\xcez\x87\x15\xbeS\x18\x86e\xc3\xe7P\xaf]\xe9\xc1\x948\xe4\xf9\x8cS\xc12\x8c\x1aw:\xf5\x1f\xae=\xebQ;=H\xc4\x8fv\xb2\x1c\x88\xd7\xb29dy\xa7\xd3;2\xdf*\xfb?\xeb\xc1T\xbfG\xf5/\xce!\xb3\xc5\xb8\x95\xda?\xea\x01T\xde\xaa\x7f\xa8p\x91\xff<\xbe\xeb\xff\xae~\x16\x03\xd5\xda{V\xff\xce\xf9G\xf8\xd5\xf5\x9b\xd5\xdf\xd1P\xf1w\xb5#\xfez\xff1\xf7\xfe\xa3\xeb\x03\x9f\x8b,\xf6}\xd6\xf7\x1ff\xc3j\xedn\xff\x13\xe5\xbdn\xfc\xc8F\x96\x03\xcc/\xb3{\xd7l`\x0f\xc9\xd6\x81\xad\xfd\xec\xfe\xd9\x89\xf79<\x9b\xbf\xa2?\xdb\x0bU\xfd\xc6\xfa\xf0\x1d\xef?X\xdf^\xe1Q\x87\xe1#\xfd\xe8\xc7l>\xaa\xfe\xae\x0f\xb3{\xbd\xdd\x88?\x9b\xb3\x8a\xcf\xec)\xd8Y\x1fV\xf7E\xcf\xddu\xf4\x0e_\xfbE\xe7N\xf2\x9d\xc00,\x1bQ\xfea\xb51\x1b]\xfe\xacn\x88\xb0\x0c\xa3\xf0\xb3<\x9c\xe5\x7f\x1c>g\xab\xbdW\xc5\x8f\xb6L[\x96\xff\xd0F\x95\xf7\xbb\xda\xb1~F\x1f\xa0v\xa5\x07\x8b\xe6\xaf\xfa=\xaa\x7f\xd4:\x8e\xe5\x7f\xa5\xf6\x8b\xf6\x00\xd3\x9c\xd9\x8b\xe6_q\xaax\xc5V\x97\xdf\xfb/\x8b\r\xa7\xf9O\xe1g\xeb\xffU|G\xc3\x0e\xfe\x88\xfb\xea\x7f\xaf\xef\xff\xab\xfboE?\xe3Y\xd5\x1f\xe9\x8a\xf6\xc0\xcc\xde\xbd\x17\xfc\x18\xca\xf7\xf3\x13x\xb3\xa1\xe0\x19v\x05\x8f1\xc7\x9e\x19\xf6\x1c\x8d\xdf\xeb\xfb\xff\xf5\xfd_\xdd\xff\x1d|\xa4\x03mT\xb8U\xec\xec\x81\\\xa78>\xf2\x81\xf9+\xaa\x8d\xef\xc5?^\x8b\xfd\xf79;\xeb\x1dV\xf8Na\x18\x96\r\x9fC\xbdv\xa5\x07S\xe2\x90\xe73N\x05\xcb0j\xdc\xe9\xd4\x7f\xb8\xf6\xacG\xed\xf4 \x11?\xda\xc9r ^\xcb\xe6\x90\xe5\x9dN\xef\xc8|\xab\xec\xff\xac\x07S\xfd\x1e\xd5\xbf8\x87\xcc\x16\xe3Vj\xff\xa8\x07Py\xab\xfe\xa1\xc2E\xfe\xf3\xf8\xae\xff\xbb\xfaY\x0cTk\xefY\xfd;\xe7\x1f\xe1W\xd7oV\x7fGC\xc5\xdf\xd5\x8e\xf8\xeb\xfd\xc7\xfc\xfb\x8f\x8e\x0f\xa2\xd8\xf7\x99\xdf\x7f\xa8\xfd\x0f\xcb\xc3Q\xde\xeb\xc6\x8fl\xa89@\x19\xd1\x1e\xc2}\xc4\xd6!\xfb\x86\xba\xb2\x7fv\xe3\xb3\xfe=\xab\xa5\xc6\xb9\x95o\xd0h\x9b\xd9\xc8zg\x7f=\x9aC\xc6=\xf4\xe1{\x006\x97\xaa\xfe\\\xfd\x06m6\xd0\xef+\xfa\xd1\x8e\xc2\xcd\xde\x1b(\xda\x99\x0f\x94\xfb#,\xe3\xad\xfc\xe7k\x12\xe5\xfd\xd7\x7fDZm\xea"),
                                                    (64, 64),
                                                    "RGBA")},
        "Blue Samurai": {
            "hp": 1,
            "speed": .4,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b'x\x9c\xedZK\x8e\x151\x0c\x9cC\xb0\x9bk 6,\xd9 \x90`\xc3e8\x01b\xc9\x9a\x03 q\x02N\x81\xc4I8\xc2\xa0\x8cdT\x14U\xb6\x93\x0co\xd0SZ\xb2x\x93\x8e?\xe5\xb8\xd3]177\xfazr{{\x87b\xa6]\xe55\xf0>\x7f\xf6\xe2\x0f\xb9d\x0e8\xf7\xe8{elv\r\x95\xee%\xf4c\xde\x9b\x97\xaf\xfe\x92\xb8\xc7k\xe2\xc62\x1b+\xfe\xd1v\xa5?\xe6\xce\xfaw~\xd1\x7f\xc4\xe0\xf0\xe3\xef\xcc\x96\x8a\xa1\xd2\xad\x9e\x05^\x87\n\xc3\xaao\xc4\x89\xf8\xd53\xbb\x1a\x03\xeb\xb2]\xd6W\xbe3\x1b\x95\xef\x8et\xfc?\xa6\xbe\xab\xcbN\x0e~\xbc~z/\x0f\x15?\xdb\xab\xf2\x1f\xf3Q\'\xb3\xa1\xf6\xa0,\x1f\x99\xfe\xf0\xa1\xf6\xb5\x1d\xfca\xaf\x93\x035\x97c\xaa\x9e\xffN=(\xfd\x9f\x9f\xde\xde\xc5\xbfC\xb2Z\xa8\xf0\xa3^\xd8C\x1f\xca\xb7\x9a\xabbb\x1b*\xb7\x19\xfe\xc8\xa7\x8a\x81E\xe1\xef\xec\xbf\xa1\xa7l\xce\xfa\xael0~\xac#U\xcb\x0e\xbf\xf3\xc76\x19;\xda@_\x0e\x8f\xcb\x9f\xcb\x03\xe3\xce\xf4;\xfbf\xf6\r\xc0\xb1\xbe\xff\xf6\xfd\xb7t\xbf\xa1P\x87s\x9a\xf9\x1e\xf3\xdf}\xf8h\xf7\xbeq\xcf\xc51\xc6\xc6\xfd!\x0e{\xdc\xcfp\xf0\xda!\x96J7b@\x1d\xae\xa1*g1\x7f\xd8\xf9\xfc\xe5\xeb\xbd\x8c\xdf\x1c\x0f\xd7\x7f`c\xff\x1c\x7f\x96\x8316\xfca\x1d\xa0\xbf.~\x85\x07mw\xf0\xf3\xf3;\x83\x9fcp\xf73\xfc,\x1d]\x9e\xc3\xe2\xf0\x87>\xc6\x8c6pM\xab\xe7_\xc5\xa0\xc6\xaa5\xcc\xa4\x83\xbf\xab\x97\xc5\x81\xd2\xd5\xbb\x86\xcb\xbd\xbfg\xf4\x95\xac\xea\xba{\xb3\xe3;1t\xdf=\x91\xbb\x15\xfe;\xa4\xcb\xfd\xf1]\xea\xc6\x1f2\x86\xce\xbb\x1bc\x98\xe5\x9e\xb3\xdc\xdf\xe1\xc7\xbfg\xce\x00*\xbd\xecYPk\xc0v:\xdf\xee\xb3\xdc\x9fm\xa88\xba\xeb\x90\xad\x9f\xfb\x8e\xcb\xf0\xe3X\xb6\x9f\xb8\xdcU\xdf\x90U\xfd\xcd\xd8\xd9\x8d!\xab\xc1\xacv\x95\xfe,\xf7\xef\xe2\x9f\xe1\xef\xb3\xfc\x9fmt\xea\xc1aw{\xda.\xfe\xb0[\xe5@\xcd\xab\xf8\xbf\xb2\x9b\xe1g\x0e6~\xafr\xff\x0c\x7f\xf7\x0c \xc6\xd4\xbc\x15\xfe\x8fyT\xeb\xe9\xf0\xafr\xff\xaa\x8e3\xfe\x1e\xf1\xed\xf0\x7f\xb4\xd3\xd97\xd4wJ\xc5\xfd+\xec.\x07\xd5\x19@\xf8\xce\xf2\xd0\xe1\xffa\xab\xe2\xbf\xee\x0c\x02\xf3\xa2\xb8c\x07;\xdar6T\xee\xd1\xef\x0e\xffG\xee\xec\xb8\xaf\xca\x1f\xeaf\xdc\xb9\xbb\xfe\x19\x07\xcf\xea\x97cE\xfe_\xad\x05\xef\x17\xca^\xc6\xdd\x14~\\\x93\x0e\x87\x0b\xecx\x0e\xc1\xb5\x90\xe1\xcf\xb8+\xc6\x97\xd5?\xd7V\x97\x83\xf2~\xa9tW\xf9\xaf\xb2\xdd\xc9\x1f\xeaV\xe7g\x9d5\xe9\xeafXV\xf9\xffJ\xdcU\xbe\xae\xf5r\xdf/\x97\xf4\xef\xf2\xbf26\xbb\x86J\xf7\x12\xfa1\xef\xf4\xffO\xff\xff\xf4\xff\xeb\xef\xe8\xffY\xdf\xd5e\'\x07\xa7\xff?w\x06\xd0\x99;\xe4\xf4\xffO\xff?\xc3\xbf\xca\xff\x19?\xd6\x91\xaa\xe5\xd3\xff?\xfd\x7f\x17?\xaf\xdd\xe9\xff\x9f\xfe?\xebW\xf5w\xfa\xff\xa7\xff\xbfs\xb9\xf7\xf7\x8c\xbe\x92U]wov|\'\x86\xee\xbbg\xc8j\xff\xdc\xe9\xbawk5\xfeX\xfd\xff\x95\xfe\xf9\xb5\xf5\xff+\xfe\xbe\xe2\x17\xf1)\x1bU\x1c\xa7\xff\xffob\xc8j0\xab]\xa5\x7f\xfa\xffs\xdc\xbf\x8b?\xec\x9e\xfe\xff\xe9\xff;\xfc\xb3\xfc\x1f\xf7\x8fN\xddb^T\xfdt\xfa\xff\x15~\x8e\xa1{\x06\x10\xba]\xfe\xaf\xfe\x0fApd\x87\xbd\xea\x7f*\xee\xbf\xfb\xfd\xdf=\x03\x18c3\xfc\x9f\xd7"\xfev\x1c\x189\xb4\xcbA\xf8s\x9c\xb9:\xbf\xc18U\x1ca\xdf\xe5\x9f\xfd"\xffg\x0e\xe8l(\xdf\\[.\xfe\xe0\xa7\xccAW\xf1\x87.\xc6Q\x9d\x01\xe0\xf9G\xc6a;\xf8yn\xf6\xfc*?\x8e\xcb+}\xb4\xd1\xb1\xe5\xf4\xf99\x9f\xe5\xd0\xa8S\xcd\xadr\xb7\xc3\xdd\xbb\xb6~\x01\xe8\x93\xc8k'),
                                                    (64, 64),
                                                    "RGBA")},
        "Gold Samurai": {
            "hp": 1,
            "speed": .5,
            "sprite_sheet": pygame.image.frombuffer(zlib.decompress(b'x\x9c\xedZ;\x8e\x14A\x0c\x1d\xcd\x19 Z!\x11#\x91\x11s\x006\xe7\x1e\xc4d\xa4\x04\\\n\xc8\x11\x01w [.0\xc8#=\xe9\xed[\xdb\xe5\xaa\xea\x9e\x9d\xdem$\x07\xd3]\xaf\xca\xcf\xbfm\x979\x1c\x9e\xf7\xbf\xd3\xe9tO^\xdc\xdc\x9c2\xd1\xf5O\to\xef\xef\xbe\x7fJ%\xdbc\xabx\xd8\xe6\xcf\xd7\x0fM\xbc\xadQ[\xce\xe2\xb1G\x0f\xfex<>\xe0\xd0\x83g\xdc\xbf\xbfw\xf7\xf4\xb7\xdf&\x19\x1e\x98Y\xbc\xa7?\xe39v\xab\xfc\x15\xc3\xfbE\xfcM\xaa\xfa\xe3=\xf3\x1f\xc5{y\xab\xfc\xb1\xb6\x87?cT\xdf\x16\xffV\xfcd\xfc\xb3=\xf0\xbe\xc5\x9fs\x95\xd7\xf6\xf2g\x9c\xc6E\x96\xffQ\xed\xac\xe4\x7fE2\x1d\x1e\x83\x7f\x96?\x11\xff\x08_\xe5\xef\xe1\x7f\xdd\xbe;\x8b\xa7\xefh\xfe3\x7f\xec\x9f\x9d\xcf\xebT\xf0.\xc3\xb7\xb8W\xce\xe7\\\xd1\x9cZ\x1b\xdf\xca\xdf\xb5\xf8Wc\xc8\xf3\xbd\x89=\xab\xe2\xb3\xef\x87\xc8\xf7Y\xec,\x85\x07\x87h\x1f\xbc\xcb\xf8\x8f`U\xf7o\xef?\xbaR\xc9\x9fQ<s\xc0z\xf8\x8c\xf1-\xfe|\xbe\xe2#,\xd7\x08\x8e\x15\xdd\x87sC\xeb\x7f\x94wQ\x1e\xb6r@\xebvo\xfc{\xf8\xecL\xae\x0f\x99\xffZ\xfcG\xf0\xaa\x0b|\xc5k{\xfd\xef\xe1[\xb9\xcb\xf6\xc3z`\xb3\xbf\xddK\xe0#\x1b0\x1e\xdc#\xfe\x1c\x03\x8ao\x9d\xb9\x94D\xdf\x0e\x15\xde[\x17\x8e\xb9H\xae\xdd\x06#\xfe\xe3\xd8\xaf\xf6\x9f\xad\xbdF\xe3g\x06?\xe2?\xfb\xbdD\xff\xbbD\xfc\x8c\xe2g\xfc\x07.K\xf4\xbf=\xe7{\x1cF\xf0\xb3\xfeS\xfe3\xfd\xafw>\xc7n\x95\xbfb\xd6\xbc\xff\xd0\xf8Y\xa2\xff\xad\xdc\x7f\xb4\xf8_\xea\xfeC\xcf\xaf\xf2\xf7\xfaW\xf6\x19\xf3\x18\xe5\x7f\xa9\xfb\x0f\xec\xd1\xd3\xff]\x13\xff,\x7fz\xf2\xaf\x87\xbf\xda\x00\xf8\xea\xfdG\x8f\xfe\xd8o\xcd\xfb\x0f\xe5\x90\xf5\xbf\xd0\xd1\xe3\xaf\xb5Rk\xea\x1a\xf7\x1f\xf6\x1b\xfdE\xab~\xcf\xf6\xbf\xec\xdb\xe8\x0e\xab\xb7v\x98\xcc\xdc\x7f@w\xee\xd13\xffE\xbaG\xb6\x8f8\xe8\x1e\xdc\xc3A\xd0\xcb\x8c\xf6\xff\xaa{\xd4\xff{\x7f\xc3\xbc\xfe?\xab\xdf\x9a\xb7\x9e\xff\xed\xf9\xcf//\x0f\x1e\x7f\xb5\xa1w~\x8f\xff\x19\x9f}\xff\x19\xf6\xf7\xed\xeb\x07\xf6c\xd1\xef\x9f\xcc\x8ex\xc76`\xfd\xc1\xdf\xc3\xb7l\x18\xdd\xe3dku_\x8f\xbf\xdaO\xfbg\xcd[/v=\xe1=#\xac\xfa\x10:\xea}X/\x7f\xf5E\xe47\xe5\xe0\xbe\xff\xf1\xf6,Q\xec\xaa\r\xf0\xec\xf3\x9bWga\\\xc6?\x12\xecc\x12\xd9\xdf[\xe3I\xc4_k\x81\'\x19\xf6\x12x\xe6\xc78<\x9f9\x9f\xf3$\x92l\x8f\xad\xe2\xb9\xf6W\xbe\xff\xd5\x96\xb3x\xec\xb1\xe5\xfew\x14\xef\xe9\xbf\xa5\xfew\x16\xef\xe5\xfd\x96\xfa_\xc5\xb7\xbe\x9f+\xfc9W\xb7\xd0\xff2\xbe\xda\xffG:<\x06\xff,\x7fz\xf3\xaf\xca\xdf\xc3o\xb9\xff\x05\xbe\xda\xffg\xe7s\xae\\\xa2\xffU\xfd\xb3\xfc\xdd\xe7\xff\xfb\xfc\xbf\x95\xbf\xfb\xfc?\x96\xec;\x94s@\xebvo\xfc{\xf8\xecL\xae\x0f\xfb\xfc\x7f\x9f\xff\x8fJ\xf4\xedP\xe1\xbdu\xe1\x98\x8bd\xd6\x06\xe8\xf3\xab\xcf/\xe1?\x8e\xfdj\xff\xd9\xda+\x92\x16\xff\x99\xf8\x1b\xf1\x9f\xfd\xde\xe7\xff\xfb\xfc\x7f\x9f\xff\xef\xf3\xff\x1e\xfe\xd74\xff\xd6\xfc\x8fjgV\xbf\xed\xf7s\x9d\xff\xe3}/\xff\xa72\xff\xc7\x19\xcc!\xeb\x7f\xbdY\x0c\x9f\xcf\xb5Rk\xea5\xdc\x7f\xe8\xf7\xb4\xda\xb8\xd2\xffF\xf3\xdf\x91\xdaa2{\xffa\xcf\xab\xf3\x7f\xb5a\xf5l\x8e\xebl\xfe\x1f\xc5\x11\xde\xadu\xff\xa1\xfaF\xf3w\xad!\xb6\xa7\xcd7qve\x06\x9d\xcd"\x95Cd?/\x079\xf6{\xef\x9d\xf8\x8c(~m\x9d\xfd_\x01>\x9f\xf9\xab\xedp\xae7\xdb\xae\xf8\x81\xf7\xa9\xf2G,{\xbe\x8b\xf8C?\xe6\x0f}\xb5\x7f\xcf\xe6\xff\xac\xbf\xd6\xba\xd6\x0c:\xe3\x0e\xfbVr\x07k+6\xf8\x0f)\xb2$\xf3'),
                                                    (64, 64),
                                                    "RGBA")},
        }
    _direction = "right"
    _current_sprite_id = 0
    _font = pygame.font.Font('freesansbold.ttf', 25)
    animation_delay = .005  # animation slowdown ratio
    animation_update_counter = .0

    def __init__(self, e: str = None, pos: tuple = (0, 0)):
        """
        e: Enemy identifier
        pos: spawn position(x,y)
        """
        if not e:
            e = choice(list(self._enemy_types.keys()))
        if not isinstance(e, str):
            raise ValueError(f"{self.__class__.__name__} e must be a string")
        if e not in self._enemy_types:
            raise ValueError(f"{self.__class__.__name__} e is unknown. See {self.__class__.__name__}._enemy_types")
        self.speed = self._enemy_types[e]["speed"]
        self.sprites = self.__import_sprites(self._enemy_types[e]["sprite_sheet"])
        self.direction = "right"
        self.sprite = self.sprites[self.direction][0]
        self.rect = self.sprite.get_rect()
        self.rect.center = pos
        self.x = self.rect.x
        self.y = self.rect.y
        self._text = choice(words)  # Text to type to defeat the enemy
        self._hp = len(self._text)
        self.update_text()
        self.text_render = self._font.render(self._text[0-self._hp:], True, (150, 0, 150), (255, 255, 255))
        _, self.text_h = self.text_render.get_size()

    @property
    def direction(self):
        return self._direction

    @direction.setter
    def direction(self, f: str):
        if not isinstance(f, str):
            raise ValueError(f"{self.__class__.__name__}.direction must be a String")
        elif not f:
            raise ValueError(f"{self.__class__.__name__}.direction can't be an empty string")
        elif f not in ["up", "right", "down", "right"]:
            raise ValueError(f"{self.__class__.__name__}.direction must be \"up\", \"right\", \"down\", \"right\"")
        else:
            self._direction = f

    @property
    def hp(self):
        return self._hp

    @staticmethod
    def __import_sprites(sprite_sheet):
        sprite_size = 16
        walk_cycle = {
            "down": [],  # Col 1
            "up": [],  # Col 2
            "left": [],  # Com 3
            "right": []}  # Col 4
        origin = [0, 0]
        while origin[0] < sprite_sheet.get_size()[0]:
            if origin[0] == 0:
                direction = "down"
            elif origin[0] == sprite_size:
                direction = "up"
            elif origin[0] == sprite_size*2:
                direction = "left"
            else:
                direction = "right"
            while origin[1] < sprite_sheet.get_size()[1]:
                new = pygame.Surface((16, 16))
                new.set_colorkey((0, 0, 0))
                new.blit(sprite_sheet, (0, 0), (origin[0], origin[1], origin[0]+sprite_size, origin[1]+sprite_size))
                new = pygame.transform.scale(new, (new.get_size()[0]*7, new.get_size()[1]*7))
                origin[1] += sprite_size
                walk_cycle[direction].append(new)
            origin[1] = 0
            origin[0] += sprite_size
        return walk_cycle

    def update_animation(self):
        if int(self.animation_update_counter) >= 1:
            self._current_sprite_id += 1
            if self._current_sprite_id > len(self.sprites["up"]) - 1:
                self._current_sprite_id = 0
            self.sprite = self.sprites[self.direction][self._current_sprite_id]
            self.animation_update_counter = .0
        else:
            self.animation_update_counter += self.animation_delay

    def hit(self, event):
        if self._text[0 - self._hp] == event.unicode:
            if self._hp < 1:
                return False
            self._hp -= 1
            self.update_text()
            return True

    def move(self, direction):
        self.direction = direction
        if self.direction == "left":
            self.x = self.x - self.speed
        if self.direction == "right":
            self.x = self.x + self.speed
        if self.direction == "up":
            self.y = self.y - self.speed
        if self.direction == "down":
            self.y = self.y - self.speed
        self.rect.x, self.rect.y = int(self.x), int(self.y)

    def update_text(self):
        if self._hp == 0:
            self.text_render = self._font.render("", True, (150, 0, 150), (255, 255, 255))
        else:
            self.text_render = self._font.render(
                self._text[0-self._hp:],
                True,
                (150, 0, 150),
                (255, 255, 255))

    def draw(self):
        screen.blit(self.sprite, self.rect)
        screen.blit(self.text_render, (self.rect.x + self.rect.w/2 - self.text_render.get_size()[0]/2, self.rect.y))


class Button:
    def __init__(self, img: bytes, size: tuple, pos: tuple, callback: str):
        """
        img: bytecode of the image
        size: take a tuple of the size of the image
        pos: Tuple of the position of the button
        callback: callback function on click
        """
        x, y = pos
        self.image = pygame.image.frombuffer(img, size, "RGBA")
        self.callback = callback
        self.rect = self.image.get_rect()
        self.rect.center = (x, y)

    def clic(self, event):
        x, y = pygame.mouse.get_pos()
        if event.type == pygame.MOUSEBUTTONDOWN:
            if self.rect.collidepoint(x, y):
                eval(self.callback)

    def draw(self):
        screen.blit(self.image, self.rect)


class Title:
    def __init__(self, text: str, pos: tuple):
        """
        text: Text of the title
        pos: Tuple of the position of the title
        """
        x, y = pos
        font = pygame.font.Font('freesansbold.ttf', 15)
        self.title = font.render(text, False, (255, 255, 255))
        self.rect = self.title.get_rect()
        self.title = pygame.transform.scale(self.title, (self.rect.w*5, self.rect.h*5))
        self.rect = self.title.get_rect()
        self.rect.center = (x, y)

    def draw(self):
        screen.blit(self.title, self.rect)


class Intro:
    def __init__(self, text: str, pos: tuple):
        """
        text: Text of the intro text
        pos: Tuple of the position of the intro text
        """
        x, y = pos
        font = pygame.font.Font('freesansbold.ttf', 15)
        self.title = font.render(text, False, (255, 255, 255))
        self.rect = self.title.get_rect()
        self.title = pygame.transform.scale(self.title, (self.rect.w*2, self.rect.h*2))
        self.rect = self.title.get_rect()
        self.rect.center = (x, y)

    def draw(self):
        screen.blit(self.title, self.rect)


def switch_game_status(status: str):
    global game_status
    valid_game_status = ["START", "GAMEOVER", "MENU"]
    if status not in valid_game_status:
        raise ValueError(f"{status}: Unknown game status")
    if status == game_status:
        raise ValueError(f"Game status is already set to {status}")
    else:
        game_status = status
        if game_status == "START":
            player.score = 0


def spawner(entities: list, **kwargs):
    global player, spawn_timer
    if "player" in locals()["kwargs"]:
        player = kwargs["player"]
    if "spawn_timer" in locals()["kwargs"]:
        spawn_timer = kwargs["spawn_timer"]
    spawn_rate = randint(2500, 4000)
    if spawn_rate < spawn_timer:
        if 5 < player.score < 10:
            spawn_table = ["Villager", "Blue Ninja"]
        elif 10 < player.score < 20:
            spawn_table = ["Villager", "Blue Ninja", "Black Ninja"]
        elif 20 < player.score < 40:
            spawn_table = ["Villager", "Blue Ninja", "Black Ninja", "Red Ninja"]
        elif 40 < player.score < 50:
            spawn_table = ["Villager", "Blue Ninja", "Black Ninja", "Red Ninja", "Blue Samurai"]
        elif 50 < player.score:
            spawn_table = ["Villager", "Blue Ninja", "Black Ninja", "Red Ninja", "Blue Samurai", "Gold Samurai"]
        else:
            spawn_table = ["Villager"]
        spawn_timer = 0
        entities.append(Enemy(choice(spawn_table), (-50, randint(50, height-32))))
    else:
        spawn_timer += 1


def enemy_garbage_collector(enemies: list,**kwargs):
    global player
    if "player" in locals()["kwargs"]:
        player = kwargs["player"]
    for i, e in enumerate(enemies):
        if e.hp <= 0:
            player.score +=1
            enemies.pop(i)


spawn_timer = 0


def main():
    global screen, player
    player = Player()
    pygame.init()
    entities = []

    while True:
        if game_status == "START":
            """Main game loop"""
            screen.fill(background_color)
            if len(entities) > 0:
                for i, e in enumerate(entities):
                    if e.rect.center[0] > width:
                        entities.clear()
                        switch_game_status("GAMEOVER")
                    else:
                        enemy_garbage_collector(entities)
                        e.update_animation()
                        e.move("right")
                        e.draw()
            spawner(entities)
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()
                if event.type == pygame.KEYDOWN:
                    for e in entities:
                        e.hit(event)

        elif game_status == "MENU":
            screen.fill(background_color)
            Title("Python Type Typing Ninja", (width/2, 100)).draw()
            line1 = Intro("Type the Python types to knock out the ninjas", (width / 2, height / 2))
            line1.draw()
            Intro("before they cross the finish line", (width / 2, height/2 + line1.rect.h)).draw()
            start_btn = Button(start_btn_img, (133, 67), (width/2, height - 150), "switch_game_status('START')")
            start_btn.draw()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    start_btn.clic(event)

        elif game_status == "GAMEOVER":
            screen.fill(background_color)
            Title("GAME OVER", (width / 2, 100)).draw()
            Title(f"SCORE: {player.score}", (int(width / 2), int(height / 2))).draw()
            menu_btn = Button(menu_btn_img, (133, 67), (int(width/4), int(height/5)*4), "switch_game_status('MENU')")
            quit_btn = Button(quit_btn_img, (133, 67), (int(width/4)*2, int(height/5)*4), "sys.exit()")
            retry_btn = Button(retry_btn_img, (133, 67), (int(width/4)*3, int(height/5)*4), "switch_game_status('START')")
            menu_btn.draw()
            quit_btn.draw()
            retry_btn.draw()
            for event in pygame.event.get():
                if event.type == pygame.QUIT:
                    sys.exit()
                if event.type == pygame.MOUSEBUTTONDOWN:
                    menu_btn.clic(event)
                    quit_btn.clic(event)
                    retry_btn.clic(event)
        pygame.display.flip()


if __name__ == '__main__':
    main()
